<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>↘緣訜oo承諾、の blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://yukiv587.github.io/blog/"/>
  <updated>2018-03-14T10:38:25.380Z</updated>
  <id>https://yukiv587.github.io/blog/</id>
  
  <author>
    <name>↘緣訜oo承諾、</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web前端常见安全问题和对策</title>
    <link href="https://yukiv587.github.io/blog/2018/03/14/web%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E5%92%8C%E5%AF%B9%E7%AD%96/"/>
    <id>https://yukiv587.github.io/blog/2018/03/14/web前端常见安全问题和对策/</id>
    <published>2018-03-14T09:15:02.000Z</published>
    <updated>2018-03-14T10:38:25.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨站脚本攻击-XSS攻击"><a href="#跨站脚本攻击-XSS攻击" class="headerlink" title="跨站脚本攻击(XSS攻击)"></a>跨站脚本攻击(XSS攻击)</h2><p> XSS(Cross Site Scripting)，跨站脚本攻击。XSS是常见的Web攻击技术之一.所谓的跨站脚本攻击指得是:恶意攻击者往Web页面里注入恶意Script代码，用户浏览这些网页时，就会执行其中的恶意代码，可对用户进行盗取cookie信息、会话劫持等各种攻击.</p><blockquote><p>解决方案:<br>  1.输入过滤。永远不要相信用户的输入，对用户输入的数据做一定的过滤。<br>  2.输出编码。服务器端输出到浏览器的数据，可以使用系统的安全函数来进行编码或转义来防范XSS攻击。在PHP中，有htmlentities()和htmlspecialchars()两个函数可以满足安全要求。相应的JavaScript的编码方式可以使用JavascriptEncode。<br>  3.安全编码。开发需尽量避免Web客户端文档重写、重定向或其他敏感操作，同时要避免使用客户端数据，这些操作需尽量在服务器端使用动态页面来实现。<br>  4.HttpOnly Cookie。预防XSS攻击窃取用户cookie最有效的防御手段。Web应用程序在设置cookie时，将其属性设为HttpOnly，就可以避免该网页的cookie被客户端恶意JavaScript窃取，保护用户cookie信息。<br>  5.WAF(Web Application Firewall)，Web应用防火墙，主要的功能是防范诸如网页木马、XSS以及CSRF等常见的Web漏洞攻击。由第三方公司开发，在企业环境中深受欢迎。</p></blockquote><h2 id="跨站请求伪造-CSRF攻击"><a href="#跨站请求伪造-CSRF攻击" class="headerlink" title="跨站请求伪造(CSRF攻击)"></a>跨站请求伪造(CSRF攻击)</h2><p>  CSRF(Cross Site Request Forgery)，即跨站请求伪造，是一种常见的Web攻击，但很多开发者对它很陌生。CSRF也是Web安全中最容易被忽略的一种网站攻击。<br>  CSRF攻击的原理:CSRF攻击过程的受害者用户登录网站A，输入个人信息，在本地保存服务器生成的cookie。然后在A网站点击由攻击者构建一条恶意链接跳转到B网站,然后B网站携带着的用户cookie信息去访问B网站.让A网站造成是用户自己访问的假相,从而来进行一些列的操作,常见的就是转账.</p><blockquote><p>解决方案：<br>1.验证码。应用程序和用户进行交互过程中，特别是账户交易这种核心步骤，强制用户输入验证码，才能完成最终请求。在通常情况下，验证码够很好地遏制CSRF攻击。但增加验证码降低了用户的体验，网站不能给所有的操作都加上验证码。所以只能将验证码作为一种辅助手段，在关键业务点设置验证码。</p><p>2.Referer Check。HTTP Referer是header的一部分，当浏览器向web服务器发送请求时，一般会带上Referer信息告诉服务器是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。可以通过检查请求的来源来防御CSRF攻击。正常请求的referer具有一定规律，如在提交表单的referer必定是在该页面发起的请求。所以通过检查http包头referer的值是不是这个页面，来判断是不是CSRF攻击。但在某些情况下如从https跳转到http，浏览器处于安全考虑，不会发送referer，服务器就无法进行check了。若与该网站同域的其他网站有XSS漏洞，那么攻击者可以在其他网站注入恶意脚本，受害者进入了此类同域的网址，也会遭受攻击。出于以上原因，无法完全依赖Referer Check作为防御CSRF的主要手段。但是可以通过Referer Check来监控CSRF攻击的发生。</p><p>3.Anti CSRF Token。目前比较完善的解决方案是加入Anti-CSRF-Token，即发送请求时在HTTP 请求中以参数的形式加入一个随机产生的token，并在服务器建立一个拦截器来验证这个token。服务器读取浏览器当前域cookie中这个token值，会进行校验该请求当中的token和cookie当中的token值是否都存在且相等，才认为这是合法的请求。否则认为这次请求是违法的，拒绝该次服务。这种方法相比Referer检查要安全很多，token可以在用户登陆后产生并放于session或cookie中，然后在每次请求时服务器把token从session或cookie中拿出，与本次请求中的token 进行比对。由于token的存在，攻击者无法再构造出一个完整的URL实施CSRF攻击。但在处理多个页面共存问题时，当某个页面消耗掉token后，其他页面的表单保存的还是被消耗掉的那个token，其他页面的表单提交时会出现token错误。</p><p>4.尽量使用POST，限制GET。</p></blockquote><h2 id="mysql注入"><a href="#mysql注入" class="headerlink" title="mysql注入"></a>mysql注入</h2><p>  SQL注入(SQL Injection)，应用程序在向后台数据库传递SQL(Structured Query Language，结构化查询语言)时，攻击者将SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令.</p><blockquote><p>解决方案:<br>(1) 防止系统敏感信息泄露。设置php.ini选项display_errors=off，防止php脚本出错之后，在web页面输出敏感信息错误，让攻击者有机可乘。<br>(2) 数据转义。设置php.ini选项magic_quotes_gpc=on，它会将提交的变量中所有的’(单引号)，”(双引号)，(反斜杠)，空白字符等都在前面自动加上\。或者采用mysql_real_escape()函数或addslashes()函数进行输入参数的转义。<br>(3) 增加黑名单或者白名单验证。白名单验证一般指，检查用户输入是否是符合预期的类型、长度、数值范围或者其他格式标准。黑名单验证是指，若在用户输入中，包含明显的恶意内容则拒绝该条用户请求。在使用白名单验证时，一般会配合黑名单验证。<br>(4) 数据库操作通过PDO等方式操作。</p></blockquote><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p>  上传漏洞在DVBBS6.0时代被黑客们利用的最为猖獗，利用上传漏洞可以直接得到WEBSHELL，危害等级超级高，现在的入侵中上传漏洞也是常见的漏洞。该漏洞允许用户上传任意文件可能会让攻击者注入危险内容或恶意代码，并在服务器上运行。 文件上传漏洞的原理：由于文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可通过 Web 访问的目录上传任意PHP文件，并能够将这些文件传递给 PHP 解释器，就可以在远程服务器上执行任意PHP脚本。 </p><blockquote><p>解决方案：<br>       (1)检查服务器是否判断了上传文件类型及后缀。<br>       (2) 定义上传文件类型白名单，即只允许白名单里面类型的文件上传。<br>        (3) 文件上传目录禁止执行脚本解析，避免攻击者进行二次攻击。  Info漏洞 Info漏洞就是CGI把输入的参数原样输出到页面，攻击者通过修改输入参数而达到欺骗用户的目的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;跨站脚本攻击-XSS攻击&quot;&gt;&lt;a href=&quot;#跨站脚本攻击-XSS攻击&quot; class=&quot;headerlink&quot; title=&quot;跨站脚本攻击(XSS攻击)&quot;&gt;&lt;/a&gt;跨站脚本攻击(XSS攻击)&lt;/h2&gt;&lt;p&gt; XSS(Cross Site Scripting)，跨
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP协议详解</title>
    <link href="https://yukiv587.github.io/blog/2018/03/14/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>https://yukiv587.github.io/blog/2018/03/14/HTTP协议详解/</id>
    <published>2018-03-14T02:49:05.000Z</published>
    <updated>2018-03-14T09:04:29.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h2><p>&emsp;&emsp;协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器<br>&emsp;&emsp;目前我们使用的是HTTP/1.1 版本</p><h2 id="Web服务器，浏览器，代理服务器"><a href="#Web服务器，浏览器，代理服务器" class="headerlink" title="Web服务器，浏览器，代理服务器"></a>Web服务器，浏览器，代理服务器</h2><p>&emsp;&emsp;当我们打开浏览器，在地址栏中输入URL，然后我们就看到了网页。 原理是怎样的呢？<br>&emsp;&emsp;实际上我们输入URL后，我们的浏览器给Web服务器发送了一个Request, Web服务器接到Request后进行处理，生成相应的Response，然后发送给浏览器， 浏览器解析Response中的HTML,这样我们就看到了网页。</p><p>我们的Request 有可能是经过了代理服务器，最后才到达Web服务器的。</p><blockquote><p>代理服务器就是网络信息的中转站，有什么功能呢？</p><ol><li>提高访问速度， 大多数的代理服务器都有缓存功能。</li><li>突破限制， 也就是FQ(翻墙)了</li><li>隐藏身份。</li></ol></blockquote><h2 id="URL详解"><a href="#URL详解" class="headerlink" title="URL详解"></a>URL详解</h2><p> URL(Uniform Resource Locator) 地址用于描述一个网络上的资源，  基本格式如下</p><blockquote><p>schema://host[:port#]/path/…/[;url-params][?query-string][#anchor]</p></blockquote><ul><li>scheme：            指定低层使用的协议(例如：http, https, ftp)</li><li>host：               HTTP服务器的IP地址或者域名</li><li>port#：             HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 <a href="http://www.cnblogs.com:8080/" target="_blank" rel="noopener">http://www.cnblogs.com:8080/</a></li><li>path：             访问资源的路径</li><li>url-params：</li><li>query-string：       发送给http服务器的数据</li><li><p>anchor-   :         锚</p><blockquote><p><a href="http://www.mywebsite.com/sj/test;id=8079?name=sviergn&amp;x=true#stuff" target="_blank" rel="noopener">http://www.mywebsite.com/sj/test;id=8079?name=sviergn&amp;x=true#stuff</a><br>Schema: http<br>host: www.mywebsite.com<br>path: /sj/test<br>URL params: id=8079<br>Query String: name=sviergn&amp;x=true<br>Anchor: stuff</p></blockquote></li></ul><h2 id="HTTP协议是无状态的"><a href="#HTTP协议是无状态的" class="headerlink" title="HTTP协议是无状态的"></a>HTTP协议是无状态的</h2><p>http协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对http服务器来说，它并不知道这两个请求来自同一个客户端。 为了解决这个问题， Web程序引入了Cookie机制来维护状态.</p><h2 id="HTTP消息的结构"><a href="#HTTP消息的结构" class="headerlink" title="HTTP消息的结构"></a>HTTP消息的结构</h2><p>先看Request 消息的结构，   Request 消息分为3部分，结构如下图</p><ul><li>第一部分叫请求行， </li><li>第二部分叫http header, </li><li>第三部分是body. header和body之间有个空行， </li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第一行中的Method表示请求方法，比如”POST”，”GET”，  Path-to-resoure表示请求的资源， Http/version-number 表示HTTP协议的版本号,当使用的是”GET” 方法的时候， body是为空的</p><h2 id="Get和Post方法的区别"><a href="#Get和Post方法的区别" class="headerlink" title="Get和Post方法的区别"></a>Get和Post方法的区别</h2><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p><blockquote><p>我们看看GET和POST的区别</p><ol><li><p>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456.  POST方法是把提交的数据放在HTTP包的Body中.</p></li><li><p>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</p></li><li><p>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</p></li><li><p>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</p></li></ol></blockquote><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>Response 消息中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br>　　状态码用来告诉HTTP客户端，HTTP服务器是否产生了预期的Response.<br>　　HTTP/1.1中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别</p><blockquote><p> 1XX  提示信息 - 表示请求已被成功接收，继续处理<br> 2XX  成功 - 表示请求已被成功接收，理解，接受<br> 3XX  重定向 - 要完成请求必须进行更进一步的处理<br> 4XX  客户端错误 -  请求有语法错误或请求无法实现<br> 5XX  服务器端错误 -   服务器未能实现合法的请求</p></blockquote><p>看看一些常见的状态码<br>200 OK —— 请求成功<br>302 Found ——所请求的页面已经临时转移至新的url（新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。）<br>304 Not Modified —— 代表上次的文档已经被缓存了， 还可以继续使用。<br>400 Bad Request  —— 客户端请求与语法错误，服务器未能理解请求。<br>403 Forbidden —— 服务器收到请求，但是拒绝提供服务<br>404 Not Found —— 请求资源不存在（输错了URL）<br>500 Internal —— Server Error 服务器发生了不可预期的错误<br>503 Server Unavailable —— 服务器当前不能处理客户端的请求，一段时间后可能恢复正常（请求未完成。服务器临时过载或当机）<br>504 Gateway Timeout —— 网关超时</p><h2 id="HTTP-Request-header"><a href="#HTTP-Request-header" class="headerlink" title="HTTP Request header"></a>HTTP Request header</h2><h3 id="Cache-头域"><a href="#Cache-头域" class="headerlink" title="Cache 头域"></a>Cache 头域</h3><h4 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h4><p>   作用： 把浏览器端缓存页面的最后修改时间发送到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行对比。如果时间一致，那么返回304，客户端就直接使用本地缓存文件。如果时间不一致，就会返回200和新的文件内容。客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示在浏览器中。</p><h4 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h4><p>   作用: If-None-Match和ETag一起工作，工作原理是在HTTP Response中添加ETag信息。 当用户再次请求该资源时，将在HTTP Request 中加入If-None-Match信息(ETag的值)。如果服务器验证资源的ETag没有改变（该资源没有更新），将返回一个304状态告诉客户端使用本地缓存文件。否则将返回200状态和新的资源和Etag.  使用这样的机制将提高网站的性能</p><h4 id="Pragma"><a href="#Pragma" class="headerlink" title="Pragma"></a>Pragma</h4><p>   作用： 防止页面被缓存， 在HTTP/1.1版本中，它和Cache-Control:no-cache作用一模一样</p><p>Pargma只有一个用法， 例如： Pragma: no-cache</p><p>   注意: 在HTTP/1.0版本中，只实现了Pragema:no-cache, 没有实现Cache-Control</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>   作用: 这个是非常重要的规则。 这个用来指定Response-Request遵循的缓存机制。各个指令含义如下</p><p>　　Cache-Control:Public   可以被任何缓存所缓存（）</p><p>　　Cache-Control:Private     内容只缓存到私有缓存中</p><p>　　Cache-Control:no-cache  所有内容都不会被缓存</p><p>　　还有其他的一些用法， 我没搞懂其中的意思， 请大家参考其他的资料</p><h3 id="Client-头域"><a href="#Client-头域" class="headerlink" title="Client 头域"></a>Client 头域</h3><h4 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h4><p>　　作用： 浏览器端可以接受的媒体类型,</p><p>　　例如：  Accept: text/html  代表浏览器可以接受服务器回发的类型为 text/html  也就是我们常说的html文档,</p><p>　　如果服务器无法返回text/html类型的数据，服务器应该返回一个406错误(non acceptable)</p><p>　　通配符 * 代表任意类型</p><p>　　例如  Accept: <em>/</em>  代表浏览器可以处理所有类型，(一般浏览器发给服务器都是发这个)</p><h4 id="Accept-Encoding："><a href="#Accept-Encoding：" class="headerlink" title="Accept-Encoding："></a>Accept-Encoding：</h4><p>　　作用： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate），（注意：这不是只字符编码）;</p><p>　　例如： Accept-Encoding: gzip, deflate</p><h4 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h4><p>　　作用： 浏览器申明自己接收的语言。 </p><p>　　语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等；</p><p>　　例如： Accept-Language: en-us</p><h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h4><p>　　作用：告诉HTTP服务器， 客户端使用的操作系统和浏览器的名称和版本.</p><p>　　我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。</p><p>　　例如： User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; InfoPath.2; .NET4.0E)</p><h4 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="Accept-Charset"></a>Accept-Charset</h4><p>　　作用：浏览器申明自己接收的字符集，这就是本文前面介绍的各种字符集和字符编码，如gb2312，utf-8（通常我们说Charset包括了相应的字符编码方案）；</p><p>　　例如：</p><h3 id="Cookie-Login-头域"><a href="#Cookie-Login-头域" class="headerlink" title="Cookie/Login 头域"></a>Cookie/Login 头域</h3><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie:"></a>Cookie:</h4><p>　　作用： 最重要的header, 将cookie的值发送给HTTP 服务器</p><h3 id="Entity头域"><a href="#Entity头域" class="headerlink" title="Entity头域"></a>Entity头域</h3><h4 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h4><p>　　作用：发送给HTTP服务器数据的长度。</p><p>　　例如： Content-Length: 38</p><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><p>　　作用：</p><p>　　例如：Content-Type: application/x-www-form-urlencoded</p><h3 id="Miscellaneous-头域"><a href="#Miscellaneous-头域" class="headerlink" title="Miscellaneous 头域"></a>Miscellaneous 头域</h3><h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer:"></a>Referer:</h4><p>　　作用： 提供了Request的上下文信息的服务器，告诉服务器我是从哪个链接过来的，比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p><p>　　例如: Referer:<a href="http://translate.google.cn/?hl=zh-cn&amp;tab=wT" target="_blank" rel="noopener">http://translate.google.cn/?hl=zh-cn&amp;tab=wT</a></p><h3 id="Transport-头域"><a href="#Transport-头域" class="headerlink" title="Transport 头域"></a>Transport 头域</h3><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>　　例如：　Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</p><p>　　例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</p><h4 id="Host（发送请求时，该报头域是必需的）"><a href="#Host（发送请求时，该报头域是必需的）" class="headerlink" title="Host（发送请求时，该报头域是必需的）"></a>Host（发送请求时，该报头域是必需的）</h4><p>　　作用: 请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的</p><p>　　例如: 我们在浏览器中输入：<a href="http://www.guet.edu.cn/index.html" target="_blank" rel="noopener">http://www.guet.edu.cn/index.html</a></p><p>　　浏览器发送的请求消息中，就会包含Host请求报头域，如下：</p><p>　　Host：<a href="http://www.guet.edu.cn" target="_blank" rel="noopener">http://www.guet.edu.cn</a></p><p>　　此处使用缺省端口号80，若指定了端口号，则变成：Host：指定端口号</p><h2 id="HTTP-Response-header"><a href="#HTTP-Response-header" class="headerlink" title="HTTP Response header"></a>HTTP Response header</h2><h3 id="Cache头域"><a href="#Cache头域" class="headerlink" title="Cache头域"></a>Cache头域</h3><p>  ####　Date<br>　　作用:  生成消息的具体时间和日期<br>　　例如：　Date: Sat, 11 Feb 2012 11:35:14 GMT </p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>　　作用: 浏览器会在指定过期时间内使用本地缓存<br>　　例如: Expires: Tue, 08 Feb 2022 11:35:14 GMT</p><h4 id="Vary"><a href="#Vary" class="headerlink" title="Vary"></a>Vary</h4><p>　　作用：<br>　　例如: Vary: Accept-Encoding<br>　　Cookie/Login 头域</p><h4 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h4><p>　　作用: 用于跨域设置Cookie, 这样可以解决iframe跨域访问cookie的问题<br>　　例如: P3P: CP=CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR　　</p><h4 id="Set-Cookie"><a href="#Set-Cookie" class="headerlink" title="Set-Cookie"></a>Set-Cookie</h4><p>　　作用： 非常重要的header, 用于把cookie 发送到客户端浏览器， 每一个写入cookie都会生成一个Set-Cookie.<br>　　例如: Set-Cookie: sc=4c31523a; path=/; domain=.acookie.taobao.com</p><h3 id="Entity头域-1"><a href="#Entity头域-1" class="headerlink" title="Entity头域"></a>Entity头域</h3><h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><p>　　作用:  和If-None-Match 配合使用。 （实例请看上节中If-None-Match的实例）<br>　　例如: ETag: “03f2b33c0bfcc1:0”</p><h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified:"></a>Last-Modified:</h4><p>　　作用： 用于指示资源的最后修改日期和时间。（实例请看上节的If-Modified-Since的实例）<br>　　例如: Last-Modified: Wed, 21 Dec 2011 09:09:10 GMT</p><h4 id="Content-Type-1"><a href="#Content-Type-1" class="headerlink" title="Content-Type"></a>Content-Type</h4><p>　　作用：WEB服务器告诉浏览器自己响应的对象的类型和字符集,<br>　　例如:<br>　　Content-Type: text/html; charset=utf-8<br>　　Content-Type:text/html;charset=GB2312<br>　　Content-Type: image/jpeg</p><h4 id="Content-Length-1"><a href="#Content-Length-1" class="headerlink" title="Content-Length"></a>Content-Length</h4><p>　　指明实体正文的长度，以字节方式存储的十进制数字来表示。在数据下行的过程中，Content-Length的方式要预先在服务器中缓存所有数据，然后所有数据再一股脑儿地发给客户端。<br>　　例如: Content-Length: 19847</p><h4 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a>Content-Encoding</h4><p>　　WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。<br>　　例如：Content-Encoding：gzip</p><h4 id="Content-Language"><a href="#Content-Language" class="headerlink" title="Content-Language"></a>Content-Language</h4><p>　　作用： WEB服务器告诉浏览器自己响应的对象的语言者<br>　　例如： Content-Language:da</p><h3 id="Miscellaneous-头域-1"><a href="#Miscellaneous-头域-1" class="headerlink" title="Miscellaneous 头域"></a>Miscellaneous 头域</h3><h4 id="Server"><a href="#Server" class="headerlink" title="Server:"></a>Server:</h4><p>　　作用：指明HTTP服务器的软件信息<br>　　例如:Server: Microsoft-IIS/7.5</p><h4 id="X-AspNet-Version"><a href="#X-AspNet-Version" class="headerlink" title="X-AspNet-Version:"></a>X-AspNet-Version:</h4><p>　　<br>　　作用：如果网站是用ASP.NET开发的，这个header用来表示ASP.NET的版本<br>　　例如: X-AspNet-Version: 4.0.30319</p><h4 id="X-Powered-By"><a href="#X-Powered-By" class="headerlink" title="X-Powered-By:"></a>X-Powered-By:</h4><p>　　作用：表示网站是用什么技术开发的<br>　　例如： X-Powered-By: ASP.NET</p><h3 id="Transport头域"><a href="#Transport头域" class="headerlink" title="Transport头域"></a>Transport头域</h3><h4 id="Connection-1"><a href="#Connection-1" class="headerlink" title="Connection:"></a>Connection:</h4><p>　　例如：　Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接<br>　　例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。　　</p><h3 id="Location头域"><a href="#Location头域" class="headerlink" title="Location头域"></a>Location头域</h3><h4 id="Location"><a href="#Location" class="headerlink" title="Location:"></a>Location:</h4><p>　　作用： 用于重定向一个新的位置， 包含新的URL地址<br>　　实例请看304状态实例<br>　　HTTP协议是无状态的和Connection: keep-alive的区别<br>　　无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。<br>　　HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）。<br>　　从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。<br>　　Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。<br>125 0</p><p>原文参考：<a href="https://www.cnblogs.com/chaoran/p/4783633.html" target="_blank" rel="noopener">https://www.cnblogs.com/chaoran/p/4783633.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是HTTP协议&quot;&gt;&lt;a href=&quot;#什么是HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;什么是HTTP协议&quot;&gt;&lt;/a&gt;什么是HTTP协议&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守
      
    
    </summary>
    
      <category term="学习文档" scheme="https://yukiv587.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="前端基础" scheme="https://yukiv587.github.io/blog/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>前端基础知识</title>
    <link href="https://yukiv587.github.io/blog/2018/03/02/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://yukiv587.github.io/blog/2018/03/02/前端基础知识/</id>
    <published>2018-03-02T05:32:31.000Z</published>
    <updated>2018-03-14T02:51:20.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><h3 id="网络七层协议"><a href="#网络七层协议" class="headerlink" title="网络七层协议"></a>网络七层协议</h3><p>从上到下：</p><ul><li>7 应用层 —— 允许访问OSI环境的手段（应用协议数据单元APDU）</li><li>6 表示层 —— 对数据进行翻译、加密和压缩（表示协议数据单元PPDU）</li><li>5 会话层 —— 建立、管理和终止会话（会话协议数据单元SPDU）</li><li>4 传输层 —— 提供端到端的可靠报文传递和错误恢复（段Segment）</li><li>3 网络层 —— 负责数据包从源到宿的传递和网际互连（包PackeT）</li><li>2 数据链路层 —— 将比特组装成帧和点到点的传递（帧Frame）</li><li>1 物理层 —— 通过媒介传输比特,确定机械及电气规范（比特Bit）</li></ul><h3 id="304缓存的原理"><a href="#304缓存的原理" class="headerlink" title="304缓存的原理"></a>304缓存的原理</h3><p>服务器首先产生ETag，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。</p><p>304是HTTP状态码，服务器用来标识这个文件没修改，不返回内容，浏览器在接收到个状态码后，会使用浏览器已缓存的文件</p><p>客户端请求一个页面（A）。 服务器返回页面A，并在给A加上一个ETag。 客户端展现该页面，并将页面连同ETag一起缓存。 客户再次请求页面A，并将上次请求时服务器返回的ETag一起传递给服务器。 服务器检查该ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应304（未修改——Not Modified）和一个空的响应体。</p><h3 id="什么是Etag？"><a href="#什么是Etag？" class="headerlink" title="什么是Etag？"></a>什么是Etag？</h3><p>当发送一个服务器请求时，浏览器首先会进行缓存过期判断。浏览器根据缓存过期时间判断缓存文件是否过期。<br>情景一：若没有过期，则不向服务器发送请求，直接使用缓存中的结果，此时我们在浏览器控制台中可以看到 200 OK(from cache) ，此时的情况就是完全使用缓存，浏览器和服务器没有任何交互的。</p><p>情景二：若已过期，则向服务器发送请求，此时请求中会带上①中设置的文件修改时间，和Etag</p><p>然后，进行资源更新判断。服务器根据浏览器传过来的文件修改时间，判断自浏览器上一次请求之后，文件是不是没有被修改过；根据Etag，判断文件内容自上一次请求之后，有没有发生变化</p><p>情形一：若两种判断的结论都是文件没有被修改过，则服务器就不给浏览器发index.html的内容了，直接告诉它，文件没有被修改过，你用你那边的缓存吧—— 304 Not Modified，此时浏览器就会从本地缓存中获取index.html的内容。此时的情况叫协议缓存，浏览器和服务器之间有一次请求交互。<br>情形二：若修改时间和文件内容判断有任意一个没有通过，则服务器会受理此次请求，之后的操作同①</p><p>① 只有get请求会被缓存，post请求不会</p><p>Expires和Cache-Control</p><p>Expires要求客户端和服务端的时钟严格同步。HTTP1.1引入Cache-Control来克服Expires头的限制。如果max-age和Expires同时出现，则max-age有更高的优先级。</p><pre><code>Cache-Control: no-cache, private, max-age=0ETag: abcdeExpires: Thu, 15 Apr 2014 20:00:00 GMTPragma: privateLast-Modified: $now // RFC1123 format</code></pre><p>ETag应用:</p><p>Etag由服务器端生成，客户端通过If-Match或者说If-None-Match这个条件判断请求来验证资源是否修改。常见的是使用If-None-Match。请求一个文件的流程可能如下：</p><p>====第一次请求===</p><p>1.客户端发起 HTTP GET 请求一个文件；</p><p>2.服务器处理请求，返回文件内容和一堆Header，当然包括Etag(例如”2e681a-6-5d044840”)(假设服务器支持Etag生成和已经开启了Etag).状态码200<br>====第二次请求===</p><p>客户端发起 HTTP GET 请求一个文件，注意这个时候客户端同时发送一个If-None-Match头，这个头的内容就是第一次请求时服务器返回的Etag：2e681a-6-5d0448402.服务器判断发送过来的Etag和计算出来的Etag匹配，因此If-None-Match为False，不返回200，返回304，客户端继续使用本地缓存；流程很简单，问题是，如果服务器又设置了Cache-Control:max-age和Expires呢，怎么办<br>答案是同时使用，也就是说在完全匹配If-Modified-Since和If-None-Match即检查完修改时间和Etag之后，</p><p>服务器才能返回304.(不要陷入到底使用谁的问题怪圈)</p><p>为什么使用Etag请求头?</p><p>Etag 主要为了解决 Last-Modified 无法解决的一些问题。</p><h3 id="Javascript垃圾回收方法"><a href="#Javascript垃圾回收方法" class="headerlink" title="Javascript垃圾回收方法"></a>Javascript垃圾回收方法</h3><blockquote><p>标记清除（mark and sweep）</p></blockquote><p>这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</p><p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了</p><blockquote><p>引用计数(reference counting)</p></blockquote><p>在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</p><p>在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的，<br>也就是说只要涉及BOM及DOM就会出现循环引用问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;理论知识&quot;&gt;&lt;a href=&quot;#理论知识&quot; class=&quot;headerlink&quot; title=&quot;理论知识&quot;&gt;&lt;/a&gt;理论知识&lt;/h2&gt;&lt;h3 id=&quot;网络七层协议&quot;&gt;&lt;a href=&quot;#网络七层协议&quot; class=&quot;headerlink&quot; title=&quot;网络七层协
      
    
    </summary>
    
      <category term="前端" scheme="https://yukiv587.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="https://yukiv587.github.io/blog/tags/HTML/"/>
    
      <category term="CSS" scheme="https://yukiv587.github.io/blog/tags/CSS/"/>
    
      <category term="JS" scheme="https://yukiv587.github.io/blog/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>github+hexo博客的主题安装及优化</title>
    <link href="https://yukiv587.github.io/blog/2018/02/24/github+hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <id>https://yukiv587.github.io/blog/2018/02/24/github+hexo博客的主题安装及优化/</id>
    <published>2018-02-24T06:58:44.461Z</published>
    <updated>2018-02-24T10:49:40.951Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://hexo.io/" target="_blank" rel="noopener">hexo官网</a>有很多比较不错的主题推荐，可以在上面选择自己喜欢的主题，然后进行相应的个性化修改，这是我使用的主题indigo，通过github+hexo搭建个人博客。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在自己认为合适的地方创建一个文件夹，这里我以E：/hexo 为例子讲解，首先在E盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><p>然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="hexo的相关配置"><a href="#hexo的相关配置" class="headerlink" title="hexo的相关配置"></a>hexo的相关配置</h2><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>然后输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。</p><h3 id="首次体验Hexo"><a href="#首次体验Hexo" class="headerlink" title="首次体验Hexo"></a>首次体验Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在浏览器中打开<a href="http://localhost:4000/，你将会看到：" target="_blank" rel="noopener">http://localhost:4000/，你将会看到：</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>选择一款自己喜欢的主题，这将成为你个人博客模版。<a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">这里是主题安装的教程</a>，下面是我安装时的经验及个人见解。<br>安装需确认你的 Hexo 版本在 3.0 以上，以及 Node 版本为 6.x 以上，在 Hexo 根目录，执行以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:yscoder/hexo-theme-indigo.git themes/indigo</span><br></pre></td></tr></table></figure></p><blockquote><p>这个命令要在博客文件夹的根目录右击鼠标打开Git Bash输入命令，其中themes/indigo就是会在博客文件夹根目录中的themes新建一个indigo文件夹存放clone下来的主题，以后的主题通常都是存放在这个目录下。<br>通俗来说就是这样git clone +通过主题的github中获取的URL+ +themes/indigo</p></blockquote><h2 id="将Hexo与Github-page联系起来"><a href="#将Hexo与Github-page联系起来" class="headerlink" title="将Hexo与Github page联系起来"></a>将Hexo与Github page联系起来</h2><p>设置Git的user name和email（如果是第一次的话）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上图是在其文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱</p><p>输入cd ~/.ssh，检查是否由.ssh的文件夹</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入ls，列出该文件下的内容。下图说明存在</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入ssh-keygen -t rsa -C “929762930@qq.com”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>登录<a href="https://github.com/" target="_blank" rel="noopener">github官网</a>账号，点击头像下的settings，添加ssh</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决</p><p>首先，清除所有的key-pair<br>ssh-add -D<br>rm -r ~/.ssh<br>删除你在github中的public-key</p><p>重新生成ssh密钥对<br>ssh-keygen -t rsa -C “xxx@xxx.com”</p><p>接下来正常操作<br>在github上添加公钥public-key:<br>1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板<br>2、在github上添加公钥时，直接复制即可<br>3、保存</p><p>测试：<br>在终端 ssh -T git@github.com</p></blockquote><p>配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>repo值是你在github项目里的ssh（右下角）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hexo-14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>新建一篇博客，在cmd执行命令：hexo new post “博客名”</p><p>需要安装一个扩展：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>那么就可以使用命令：hexo d -g，生成以及部署了<br>部署成功后访问你的地址：”<a href="http://用户名.github.io" target="_blank" rel="noopener">http://用户名.github.io</a> “。那么将看到生成的文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo官网&lt;/a&gt;有很多比较不错的主题推荐，可以在上面选择自己喜欢的主题，然后进行相应的个性化修改，这是我使用的主题indigo，通过github+hex
      
    
    </summary>
    
      <category term="学习文档" scheme="https://yukiv587.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Hexo" scheme="https://yukiv587.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>CSS实用Tips</title>
    <link href="https://yukiv587.github.io/blog/2018/02/08/CSS%E5%AE%9E%E7%94%A8Tips/"/>
    <id>https://yukiv587.github.io/blog/2018/02/08/CSS实用Tips/</id>
    <published>2018-02-08T07:13:51.000Z</published>
    <updated>2018-02-24T09:19:29.710Z</updated>
    
    <content type="html"><![CDATA[<p>作为自己做前端开发以来的CSS爬坑总结，内容偏向PC端，不定期补充。<br>只作提示，不深谈。</p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul><li>a</li><li>b </li><li>c</li></ul><p>1、区分content-box和border-box的尺寸计算。</p><p>2、行级元素无宽高，但可设内外边距。</p><p>3、外边距margin可设负值，内边距padding不可以。</p><p>4、当内外边距值为百分比时是相对于元素宽度计算的。</p><p>5、border是个好玩的东西，关键字：css三角形。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;Hello World!&apos;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为自己做前端开发以来的CSS爬坑总结，内容偏向PC端，不定期补充。&lt;br&gt;只作提示，不深谈。&lt;/p&gt;
&lt;h2 id=&quot;盒子模型&quot;&gt;&lt;a href=&quot;#盒子模型&quot; class=&quot;headerlink&quot; title=&quot;盒子模型&quot;&gt;&lt;/a&gt;盒子模型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;a
      
    
    </summary>
    
      <category term="前端" scheme="https://yukiv587.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="https://yukiv587.github.io/blog/tags/HTML/"/>
    
      <category term="CSS" scheme="https://yukiv587.github.io/blog/tags/CSS/"/>
    
      <category term="JS" scheme="https://yukiv587.github.io/blog/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>常用网站</title>
    <link href="https://yukiv587.github.io/blog/2018/02/08/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <id>https://yukiv587.github.io/blog/2018/02/08/常用网站/</id>
    <published>2018-02-08T02:36:26.000Z</published>
    <updated>2018-02-24T05:57:30.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考手册"><a href="#参考手册" class="headerlink" title="参考手册"></a>参考手册</h1><ul><li><a href="http://css.doyoe.com/" target="_blank" rel="noopener">css参考手册</a></li><li><a href="http://www.divcss5.com/css3/" target="_blank" rel="noopener">css3参考手册</a></li><li><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">jquery手册</a></li></ul><hr><h1 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h1><ul><li><a href="http://v3.bootcss.com/" target="_blank" rel="noopener">Bootstrop</a></li><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">vue</a></li><li><a href="https://vux.li/#/" target="_blank" rel="noopener">vux</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a></li></ul><hr><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul><li><a href="https://luuman.github.io/FrontEndGuide/V1/index.html#page_0" target="_blank" rel="noopener">前端导航</a></li><li><a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="noopener">ES6</a></li><li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="noopener">微信小程序文档</a></li><li><a href="http://www.markdown.cn/#philosophy/" target="_blank" rel="noopener">markdown 语法说明</a></li></ul><hr><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="css样式重置"><a href="#css样式重置" class="headerlink" title="css样式重置"></a>css样式重置</h2><ul><li><a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">normalize.css</a></li><li><a href="https://cssreset.com/" target="_blank" rel="noopener">CSS reset</a></li></ul><h2 id="动画库"><a href="#动画库" class="headerlink" title="动画库"></a>动画库</h2><ul><li><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate.css</a></li><li><a href="http://h5bp.github.io/Effeckt.css/" target="_blank" rel="noopener">Effeckt.css</a></li><li><a href="https://www.minimamente.com/example/magic_animations/" target="_blank" rel="noopener">magic.css</a></li><li><a href="http://www.htmleaf.com/css3/css3donghua/201501061116.html/" target="_blank" rel="noopener">csshake.css – 抖动动画</a></li><li><a href="http://www.htmleaf.com/jQuery/Image-Effects/201501061112.html" target="_blank" rel="noopener">snabbt.js</a></li></ul><h2 id="JQuery插件"><a href="#JQuery插件" class="headerlink" title="JQuery插件"></a>JQuery插件</h2><ul><li><a href="http://www.jq22.com/" target="_blank" rel="noopener">JQuery插件库</a></li><li><a href="http://www.htmleaf.com/" target="_blank" rel="noopener">JQuery之家</a></li><li><a href="http://www.jqueryfuns.com/" target="_blank" rel="noopener">jqueryfuns– 响应式模板</a></li><li><a href="https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs" target="_blank" rel="noopener">fullPage.js–全屏滚动插件</a></li><li><a href="http://demo.jb51.net/js/myfocus/demo.html" target="_blank" rel="noopener">myFocus – js焦点轮播</a></li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li><a href="http://cubic-bezier.com/#.17,.67,.83,.67" target="_blank" rel="noopener">贝塞尔曲线css3绘制工具</a></li></ul><hr><h1 id="素材网"><a href="#素材网" class="headerlink" title="素材网"></a>素材网</h1><ul><li><a href="https://tinypng.com/" target="_blank" rel="noopener">图片压缩</a></li><li><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴矢量图</a></li><li><p><a href="http://ionicons.com/" target="_blank" rel="noopener">ionicons–图标</a></p><hr><h1 id="面试题库"><a href="#面试题库" class="headerlink" title="面试题库"></a>面试题库</h1></li><li><a href="http://blog.csdn.net/kebi007/article/details/54882425#comments" target="_blank" rel="noopener">2017年前端面试题整理汇总100题</a></li><li><a href="https://www.kancloud.cn/digest/front-interview/86832" target="_blank" rel="noopener">前端面试题目搜集</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考手册&quot;&gt;&lt;a href=&quot;#参考手册&quot; class=&quot;headerlink&quot; title=&quot;参考手册&quot;&gt;&lt;/a&gt;参考手册&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://css.doyoe.com/&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
      <category term="学习文档" scheme="https://yukiv587.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
    
    
  </entry>
  
</feed>
